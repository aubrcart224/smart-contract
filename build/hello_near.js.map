{"version":3,"file":"hello_near.js","sources":["../node_modules/near-sdk-js/lib/utils.js","../node_modules/near-sdk-js/lib/types/public_key.js","../node_modules/near-sdk-js/lib/types/vm_types.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/near-bindgen.js","../src/contract.ts"],"sourcesContent":["// make PromiseIndex a nominal typing\nvar PromiseIndexBrand;\n(function (PromiseIndexBrand) {\n    PromiseIndexBrand[PromiseIndexBrand[\"_\"] = -1] = \"_\";\n})(PromiseIndexBrand || (PromiseIndexBrand = {}));\nconst TYPE_KEY = \"typeInfo\";\nvar TypeBrand;\n(function (TypeBrand) {\n    TypeBrand[\"BIGINT\"] = \"bigint\";\n    TypeBrand[\"DATE\"] = \"date\";\n})(TypeBrand || (TypeBrand = {}));\nexport const ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport const ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ACCOUNT_ID_REGEX = /^(([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+$/;\n/**\n * Concat two Uint8Array\n * @param array1\n * @param array2\n * @returns the concatenation of two array\n */\nexport function concat(array1, array2) {\n    const mergedArray = new Uint8Array(array1.length + array2.length);\n    mergedArray.set(array1);\n    mergedArray.set(array2, array1.length);\n    return mergedArray;\n}\n/**\n * Asserts that the expression passed to the function is truthy, otherwise throws a new Error with the provided message.\n *\n * @param expression - The expression to be asserted.\n * @param message - The error message to be printed.\n */\nexport function assert(expression, message) {\n    if (!expression) {\n        throw new Error(\"assertion failed: \" + message);\n    }\n}\nexport function getValueWithOptions(value, options = {\n    deserializer: deserialize,\n}) {\n    if (value === null) {\n        return options?.defaultValue ?? null;\n    }\n    const deserialized = deserialize(value);\n    if (deserialized === undefined || deserialized === null) {\n        return options?.defaultValue ?? null;\n    }\n    if (options?.reconstructor) {\n        return options.reconstructor(deserialized);\n    }\n    return deserialized;\n}\nexport function serializeValueWithOptions(value, { serializer } = {\n    serializer: serialize,\n}) {\n    return serializer(value);\n}\nexport function serialize(valueToSerialize) {\n    return encode(JSON.stringify(valueToSerialize, function (key, value) {\n        if (typeof value === \"bigint\") {\n            return {\n                value: value.toString(),\n                [TYPE_KEY]: TypeBrand.BIGINT,\n            };\n        }\n        if (typeof this[key] === \"object\" &&\n            this[key] !== null &&\n            this[key] instanceof Date) {\n            return {\n                value: this[key].toISOString(),\n                [TYPE_KEY]: TypeBrand.DATE,\n            };\n        }\n        return value;\n    }));\n}\nexport function deserialize(valueToDeserialize) {\n    return JSON.parse(decode(valueToDeserialize), (_, value) => {\n        if (value !== null &&\n            typeof value === \"object\" &&\n            Object.keys(value).length === 2 &&\n            Object.keys(value).every((key) => [\"value\", TYPE_KEY].includes(key))) {\n            switch (value[TYPE_KEY]) {\n                case TypeBrand.BIGINT:\n                    return BigInt(value[\"value\"]);\n                case TypeBrand.DATE:\n                    return new Date(value[\"value\"]);\n            }\n        }\n        return value;\n    });\n}\n/**\n * Validates the Account ID according to the NEAR protocol\n * [Account ID rules](https://nomicon.io/DataStructures/Account#account-id-rules).\n *\n * @param accountId - The Account ID string you want to validate.\n */\nexport function validateAccountId(accountId) {\n    return (accountId.length >= 2 &&\n        accountId.length <= 64 &&\n        ACCOUNT_ID_REGEX.test(accountId));\n}\n/**\n * A subset of NodeJS TextEncoder API\n */\nexport class TextEncoder {\n    encode(s) {\n        return env.utf8_string_to_uint8array(s);\n    }\n}\n/**\n * A subset of NodeJS TextDecoder API. Only support utf-8 and latin1 encoding.\n */\nexport class TextDecoder {\n    constructor(encoding = \"utf-8\") {\n        this.encoding = encoding;\n    }\n    decode(a) {\n        if (this.encoding == \"utf-8\") {\n            return env.uint8array_to_utf8_string(a);\n        }\n        else if (this.encoding == \"latin1\") {\n            return env.uint8array_to_latin1_string(a);\n        }\n        else {\n            throw new Error(\"unsupported encoding: \" + this.encoding);\n        }\n    }\n}\n/**\n * Convert a string to Uint8Array, each character must have a char code between 0-255.\n * @param s - string that with only Latin1 character to convert\n * @returns result Uint8Array\n */\nexport function bytes(s) {\n    return env.latin1_string_to_uint8array(s);\n}\n/**\n * Convert a Uint8Array to string, each uint8 to the single character of that char code\n * @param a - Uint8Array to convert\n * @returns result string\n */\nexport function str(a) {\n    return env.uint8array_to_latin1_string(a);\n}\n/**\n * Encode the string to Uint8Array with UTF-8 encoding\n * @param s - String to encode\n * @returns result Uint8Array\n */\nexport function encode(s) {\n    return env.utf8_string_to_uint8array(s);\n}\n/**\n * Decode the Uint8Array to string in UTF-8 encoding\n * @param a - array to decode\n * @returns result string\n */\nexport function decode(a) {\n    return env.uint8array_to_utf8_string(a);\n}\n","import { base58 } from \"@scure/base\";\nimport { concat } from \"../utils\";\nexport var CurveType;\n(function (CurveType) {\n    CurveType[CurveType[\"ED25519\"] = 0] = \"ED25519\";\n    CurveType[CurveType[\"SECP256K1\"] = 1] = \"SECP256K1\";\n})(CurveType || (CurveType = {}));\nvar DataLength;\n(function (DataLength) {\n    DataLength[DataLength[\"ED25519\"] = 32] = \"ED25519\";\n    DataLength[DataLength[\"SECP256K1\"] = 64] = \"SECP256K1\";\n})(DataLength || (DataLength = {}));\nfunction getCurveType(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return curveType;\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction dataLength(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return {\n                [CurveType.ED25519]: DataLength.ED25519,\n                [CurveType.SECP256K1]: DataLength.SECP256K1,\n            }[curveType];\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction splitKeyTypeData(value) {\n    const idx = value.indexOf(\":\");\n    if (idx >= 0) {\n        return [\n            curveTypeFromStr(value.substring(0, idx)),\n            value.substring(idx + 1),\n        ];\n    }\n    else {\n        return [CurveType.ED25519, value];\n    }\n}\nexport function curveTypeFromStr(value) {\n    switch (value) {\n        case \"ed25519\":\n            return CurveType.ED25519;\n        case \"secp256k1\":\n            return CurveType.SECP256K1;\n        default:\n            throw new UnknownCurve();\n    }\n}\nexport class ParsePublicKeyError extends Error {\n}\nexport class InvalidLengthError extends ParsePublicKeyError {\n    constructor(length, expectedLength) {\n        super(`Invalid length: ${length}. Expected: ${expectedLength}`);\n        this.length = length;\n        this.expectedLength = expectedLength;\n    }\n}\nexport class Base58Error extends ParsePublicKeyError {\n    constructor(error) {\n        super(`Base58 error: ${error}`);\n        this.error = error;\n    }\n}\nexport class UnknownCurve extends ParsePublicKeyError {\n    constructor() {\n        super(\"Unknown curve\");\n    }\n}\n/**\n * A abstraction on top of the NEAR public key string.\n */\nexport class PublicKey {\n    /**\n     * @param data - The string you want to create a PublicKey from.\n     */\n    constructor(data) {\n        const curveLenght = dataLength(data[0]);\n        if (data.length !== curveLenght + 1) {\n            throw new InvalidLengthError(data.length, curveLenght + 1);\n        }\n        this.type = getCurveType(data[0]);\n        this.data = data;\n    }\n    /**\n     * The curve type of the public key.\n     */\n    curveType() {\n        return this.type;\n    }\n    /**\n     * Create a public key from a public key string.\n     *\n     * @param publicKeyString - The public key string you want to create a PublicKey from.\n     */\n    static fromString(publicKeyString) {\n        const [curve, keyData] = splitKeyTypeData(publicKeyString);\n        let data;\n        try {\n            data = base58.decode(keyData);\n        }\n        catch (error) {\n            throw new Base58Error(error.message);\n        }\n        return new PublicKey(concat(new Uint8Array([curve]), data));\n    }\n}\n","/**\n * A Promise result in near can be one of:\n * - NotReady = 0 - the promise you are specifying is still not ready, not yet failed nor successful.\n * - Successful = 1 - the promise has been successfully executed and you can retrieve the resulting value.\n * - Failed = 2 - the promise execution has failed.\n */\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\n/**\n * A promise error can either be due to the promise failing or not yet being ready.\n */\nexport var PromiseError;\n(function (PromiseError) {\n    PromiseError[PromiseError[\"Failed\"] = 0] = \"Failed\";\n    PromiseError[PromiseError[\"NotReady\"] = 1] = \"NotReady\";\n})(PromiseError || (PromiseError = {}));\n","import { assert, str, encode, decode, } from \"./utils\";\nimport { PromiseResult } from \"./types\";\nconst U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\n/**\n * Logs parameters in the NEAR WASM virtual machine.\n *\n * @param params - Parameters to log.\n */\nexport function log(...params) {\n    env.log(params.reduce((accumulated, parameter, index) => {\n        // Stringify undefined\n        const param = parameter === undefined ? \"undefined\" : parameter;\n        // Convert Objects to strings and convert to string\n        const stringified = typeof param === \"object\" ? JSON.stringify(param) : `${param}`;\n        if (index === 0) {\n            return stringified;\n        }\n        return `${accumulated} ${stringified}`;\n    }, \"\"));\n}\n/**\n * Returns the account ID of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the public key of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\n/**\n * Returns the account ID of the account that called the function.\n * Can only be called in a call or initialize function.\n */\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the account ID of the current contract - the contract that is being executed.\n */\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the current block index.\n */\nexport function blockIndex() {\n    return env.block_index();\n}\n/**\n * Returns the current block height.\n */\nexport function blockHeight() {\n    return blockIndex();\n}\n/**\n * Returns the current block timestamp.\n */\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\n/**\n * Returns the current epoch height.\n */\nexport function epochHeight() {\n    return env.epoch_height();\n}\n/**\n * Returns the amount of NEAR attached to this function call.\n * Can only be called in payable functions.\n */\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\n/**\n * Returns the amount of Gas that was attached to this function call.\n */\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\n/**\n * Returns the amount of Gas that has been used by this function call until now.\n */\nexport function usedGas() {\n    return env.used_gas();\n}\n/**\n * Returns the current account's account balance.\n */\nexport function accountBalance() {\n    return env.account_balance();\n}\n/**\n * Returns the current account's locked balance.\n */\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\n/**\n * Reads the value from NEAR storage that is stored under the provided key.\n *\n * @param key - The key to read from storage.\n */\nexport function storageReadRaw(key) {\n    const returnValue = env.storage_read(key, 0);\n    if (returnValue !== 1n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n/**\n * Reads the utf-8 string value from NEAR storage that is stored under the provided key.\n *\n * @param key - The utf-8 string key to read from storage.\n */\nexport function storageRead(key) {\n    const ret = storageReadRaw(encode(key));\n    if (ret !== null) {\n        return decode(ret);\n    }\n    return null;\n}\n/**\n * Checks for the existance of a value under the provided key in NEAR storage.\n *\n * @param key - The key to check for in storage.\n */\nexport function storageHasKeyRaw(key) {\n    return env.storage_has_key(key) === 1n;\n}\n/**\n * Checks for the existance of a value under the provided utf-8 string key in NEAR storage.\n *\n * @param key - The utf-8 string key to check for in storage.\n */\nexport function storageHasKey(key) {\n    return storageHasKeyRaw(encode(key));\n}\n/**\n * Get the last written or removed value from NEAR storage.\n */\nexport function storageGetEvictedRaw() {\n    return env.read_register(EVICTED_REGISTER);\n}\n/**\n * Get the last written or removed value from NEAR storage as utf-8 string.\n */\nexport function storageGetEvicted() {\n    return decode(storageGetEvictedRaw());\n}\n/**\n * Returns the current accounts NEAR storage usage.\n */\nexport function storageUsage() {\n    return env.storage_usage();\n}\n/**\n * Writes the provided bytes to NEAR storage under the provided key.\n *\n * @param key - The key under which to store the value.\n * @param value - The value to store.\n */\nexport function storageWriteRaw(key, value) {\n    return env.storage_write(key, value, EVICTED_REGISTER) === 1n;\n}\n/**\n * Writes the provided utf-8 string to NEAR storage under the provided key.\n *\n * @param key - The utf-8 string key under which to store the value.\n * @param value - The utf-8 string value to store.\n */\nexport function storageWrite(key, value) {\n    return storageWriteRaw(encode(key), encode(value));\n}\n/**\n * Removes the value of the provided key from NEAR storage.\n *\n * @param key - The key to be removed.\n */\nexport function storageRemoveRaw(key) {\n    return env.storage_remove(key, EVICTED_REGISTER) === 1n;\n}\n/**\n * Removes the value of the provided utf-8 string key from NEAR storage.\n *\n * @param key - The utf-8 string key to be removed.\n */\nexport function storageRemove(key) {\n    return storageRemoveRaw(encode(key));\n}\n/**\n * Returns the cost of storing 0 Byte on NEAR storage.\n */\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n/**\n * Returns the arguments passed to the current smart contract call.\n */\nexport function inputRaw() {\n    env.input(0);\n    return env.read_register(0);\n}\n/**\n * Returns the arguments passed to the current smart contract call as utf-8 string.\n */\nexport function input() {\n    return decode(inputRaw());\n}\n/**\n * Returns the value from the NEAR WASM virtual machine.\n *\n * @param value - The value to return.\n */\nexport function valueReturnRaw(value) {\n    env.value_return(value);\n}\n/**\n * Returns the utf-8 string value from the NEAR WASM virtual machine.\n *\n * @param value - The utf-8 string value to return.\n */\nexport function valueReturn(value) {\n    valueReturnRaw(encode(value));\n}\n/**\n * Returns a random string of bytes.\n */\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreateRaw(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return promiseCreateRaw(accountId, methodName, encode(args), amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThenRaw(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return promiseThenRaw(promiseIndex, accountId, methodName, encode(args), amount, gas);\n}\n/**\n * Join an arbitrary array of NEAR promises.\n *\n * @param promiseIndexes - An arbitrary array of NEAR promise indexes to join.\n */\nexport function promiseAnd(...promiseIndexes) {\n    return env.promise_and(...promiseIndexes);\n}\n/**\n * Create a NEAR promise which will have multiple promise actions inside.\n *\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\n/**\n * Attach a callback NEAR promise to a batch of NEAR promise actions.\n *\n * @param promiseIndex - The NEAR promise index of the batch.\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\n/**\n * Attach a create account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a create account action to.\n */\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\n/**\n * Attach a deploy contract promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a deploy contract action to.\n * @param code - The WASM byte code of the contract to be deployed.\n */\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCallRaw(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    promiseBatchActionFunctionCallRaw(promiseIndex, methodName, encode(args), amount, gas);\n}\n/**\n * Attach a transfer promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a transfer action to.\n * @param amount - The amount of NEAR to transfer.\n */\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\n/**\n * Attach a stake promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a stake action to.\n * @param amount - The amount of NEAR to stake.\n * @param publicKey - The public key with which to stake.\n */\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\n/**\n * Attach a add full access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add full access key action to.\n * @param publicKey - The public key to add as a full access key.\n * @param nonce - The nonce to use.\n */\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\n/**\n * Attach a add access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add access key action to.\n * @param publicKey - The public key to add.\n * @param nonce - The nonce to use.\n * @param allowance - The allowance of the access key.\n * @param receiverId - The account ID of the receiver.\n * @param methodNames - The names of the method to allow the key for.\n */\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\n/**\n * Attach a delete key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete key action to.\n * @param publicKey - The public key to delete.\n */\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\n/**\n * Attach a delete account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete account action to.\n * @param beneficiaryId - The account ID of the beneficiary - the account that receives the remaining amount of NEAR.\n */\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeightRaw(promiseIndex, methodName, args, amount, gas, weight) {\n    env.promise_batch_action_function_call_weight(promiseIndex, methodName, args, amount, gas, weight);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeight(promiseIndex, methodName, args, amount, gas, weight) {\n    promiseBatchActionFunctionCallWeightRaw(promiseIndex, methodName, encode(args), amount, gas, weight);\n}\n/**\n * The number of promise results available.\n */\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index.\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResultRaw(promiseIndex) {\n    const status = env.promise_result(promiseIndex, 0);\n    assert(Number(status) === PromiseResult.Successful, `Promise result ${status == PromiseResult.Failed\n        ? \"Failed\"\n        : status == PromiseResult.NotReady\n            ? \"NotReady\"\n            : status}`);\n    return env.read_register(0);\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index as utf-8 string\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResult(promiseIndex) {\n    return decode(promiseResultRaw(promiseIndex));\n}\n/**\n * Executes the promise in the NEAR WASM virtual machine.\n *\n * @param promiseIndex - The index of the promise to execute.\n */\nexport function promiseReturn(promiseIndex) {\n    env.promise_return(promiseIndex);\n}\n/**\n * Returns sha256 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns keccak256 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns keccak512 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns ripemd160 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\n/**\n * Recovers an ECDSA signer address from a 32-byte message hash and a corresponding\n * signature along with v recovery byte. Takes in an additional flag to check for\n * malleability of the signature which is generally only ideal for transactions.\n *\n * @param hash - 32-byte message hash\n * @param sig - signature\n * @param v - number of recovery byte\n * @param malleabilityFlag - whether to check malleability\n * @returns 64 bytes representing the public key if the recovery was successful.\n */\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    const returnValue = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (returnValue === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n// NOTE: \"env.panic(msg)\" is not exported, use \"throw Error(msg)\" instead\n/**\n * Panic the transaction execution with given message\n * @param msg - panic message in raw bytes, which should be a valid UTF-8 sequence\n */\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\n/**\n * Log the message in transaction logs\n * @param msg - message in raw bytes, which should be a valid UTF-8 sequence\n */\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\n/**\n * Log the message in transaction logs\n * @param msg - message in raw bytes, which should be a valid UTF-16 sequence\n */\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\n/**\n * Returns the number of staked NEAR of given validator, in yoctoNEAR\n * @param accountId - validator's AccountID\n * @returns - staked amount\n */\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\n/**\n * Returns the number of staked NEAR of all validators, in yoctoNEAR\n * @returns total staked amount\n */\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\n/**\n * Computes multiexp on alt_bn128 curve using Pippenger's algorithm \\sum_i\n * mul_i g_{1 i} should be equal result.\n *\n * @param value - equence of (g1:G1, fr:Fr), where\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq.\n * `value` is encoded as packed, little-endian\n * `[((u256, u256), u256)]` slice.\n *\n * @returns multi exp sum\n */\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\n/**\n * Computes sum for signed g1 group elements on alt_bn128 curve \\sum_i\n * (-1)^{sign_i} g_{1 i} should be equal result.\n *\n * @param value - sequence of (sign:bool, g1:G1), where\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq.\n * value` is encoded a as packed, little-endian\n * `[((u256, u256), ((u256, u256), (u256, u256)))]` slice.\n *\n * @returns sum over Fq.\n */\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\n/**\n * Computes pairing check on alt_bn128 curve.\n * \\sum_i e(g_{1 i}, g_{2 i}) should be equal one (in additive notation), e(g1, g2) is Ate pairing\n *\n * @param value - sequence of (g1:G1, g2:G2), where\n * G2 is Fr-ordered subgroup point (x:Fq2, y:Fq2) on alt_bn128 twist,\n * alt_bn128 twist is Y^2 = X^3 + 3/(i+9) curve over Fq2\n * Fq2 is complex field element (re: Fq, im: Fq)\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq\n * `value` is encoded a as packed, little-endian\n * `[((u256, u256), ((u256, u256), (u256, u256)))]` slice.\n *\n * @returns whether pairing check pass\n */\nexport function altBn128PairingCheck(value) {\n    return env.alt_bn128_pairing_check(value) === 1n;\n}\n","import * as near from \"../api\";\nimport { getValueWithOptions, serializeValueWithOptions, encode, } from \"../utils\";\n/**\n * A lookup map that stores data in NEAR storage.\n */\nexport class LookupMap {\n    /**\n     * @param keyPrefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    /**\n     * Checks whether the collection contains the value.\n     *\n     * @param key - The value for which to check the presence.\n     */\n    containsKey(key) {\n        const storageKey = this.keyPrefix + key;\n        return near.storageHasKey(storageKey);\n    }\n    /**\n     * Get the data stored at the provided key.\n     *\n     * @param key - The key at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(key, options) {\n        const storageKey = this.keyPrefix + key;\n        const value = near.storageReadRaw(encode(storageKey));\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Removes and retrieves the element with the provided key.\n     *\n     * @param key - The key at which to remove data.\n     * @param options - Options for retrieving the data.\n     */\n    remove(key, options) {\n        const storageKey = this.keyPrefix + key;\n        if (!near.storageRemove(storageKey)) {\n            return options?.defaultValue ?? null;\n        }\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Store a new value at the provided key.\n     *\n     * @param key - The key at which to store in the collection.\n     * @param newValue - The value to store in the collection.\n     * @param options - Options for retrieving and storing the data.\n     */\n    set(key, newValue, options) {\n        const storageKey = this.keyPrefix + key;\n        const storageValue = serializeValueWithOptions(newValue, options);\n        if (!near.storageWriteRaw(encode(storageKey), storageValue)) {\n            return options?.defaultValue ?? null;\n        }\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Extends the current collection with the passed in array of key-value pairs.\n     *\n     * @param keyValuePairs - The key-value pairs to extend the collection with.\n     * @param options - Options for storing the data.\n     */\n    extend(keyValuePairs, options) {\n        for (const [key, value] of keyValuePairs) {\n            this.set(key, value, options);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","import * as near from \"./api\";\nimport { deserialize, serialize, bytes, encode } from \"./utils\";\n/**\n * Tells the SDK to use this function as the initialization function of the contract.\n *\n * @param _empty - An empty object.\n */\nexport function initialize(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\n/**\n * Tells the SDK to expose this function as a view function.\n *\n * @param _empty - An empty object.\n */\nexport function view(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\nexport function call({ privateFunction = false, payableFunction = false, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            if (privateFunction &&\n                near.predecessorAccountId() !== near.currentAccountId()) {\n                throw new Error(\"Function is private\");\n            }\n            if (!payableFunction && near.attachedDeposit() > 0n) {\n                throw new Error(\"Function is not payable\");\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\n/**\n * Tells the SDK to apply an array of passed in middleware to the function execution.\n *\n * @param middlewares - The middlewares to be executed.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function middleware(...middlewares) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            try {\n                middlewares.forEach((middleware) => middleware(...args));\n            }\n            catch (error) {\n                throw new Error(error);\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\nexport function NearBindgen({ requireInit = false, serializer = serialize, deserializer = deserialize, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (target) => {\n        return class extends target {\n            static _create() {\n                return new target();\n            }\n            static _getState() {\n                const rawState = near.storageReadRaw(bytes(\"STATE\"));\n                return rawState ? this._deserialize(rawState) : null;\n            }\n            static _saveToStorage(objectToSave) {\n                near.storageWriteRaw(bytes(\"STATE\"), this._serialize(objectToSave));\n            }\n            static _getArgs() {\n                return JSON.parse(near.input() || \"{}\");\n            }\n            static _serialize(value, forReturn = false) {\n                if (forReturn) {\n                    return encode(JSON.stringify(value, (_, value) => typeof value === \"bigint\" ? `${value}` : value));\n                }\n                return serializer(value);\n            }\n            static _deserialize(value) {\n                return deserializer(value);\n            }\n            static _reconstruct(classObject, plainObject) {\n                for (const item in classObject) {\n                    const reconstructor = classObject[item].constructor?.reconstruct;\n                    classObject[item] = reconstructor\n                        ? reconstructor(plainObject[item])\n                        : plainObject[item];\n                }\n                return classObject;\n            }\n            static _requireInit() {\n                return requireInit;\n            }\n        };\n    };\n}\n","// Find all our documentation at https://docs.near.org\nimport {\n  NearBindgen,\n  call,\n  view,\n  initialize,\n  near,\n  LookupMap,\n  assert,\n  validateAccountId,\n} from \"near-sdk-js\";\n\n@NearBindgen({ requireInit: true })\nexport class FungibleToken {\n  accounts: LookupMap<bigint>;\n  accountRegistrants: LookupMap<string>;\n  accountDeposits: LookupMap<bigint>;\n  totalSupply: bigint;\n\n  constructor() {\n    this.accounts = new LookupMap(\"a\");\n    this.accountRegistrants = new LookupMap(\"r\");\n    this.accountDeposits = new LookupMap(\"d\");\n    this.totalSupply = BigInt(\"0\");\n  }\n\n  @initialize({})\n  init({ owner_id, total_supply }: { owner_id: string; total_supply: string }) {\n    Assertions.isLeftGreaterThanRight(total_supply, 0);\n    validateAccountId(owner_id);\n    this.totalSupply = BigInt(total_supply);\n    this.accounts.set(owner_id, this.totalSupply);\n  }\n\n  internalGetAccountStorageUsage(accountLength: number): bigint {\n    const initialStorageUsage = near.storageUsage();\n    const tempAccountId = \"a\".repeat(64);\n    this.accounts.set(tempAccountId, BigInt(\"0\"));\n    const len64StorageUsage = near.storageUsage() - initialStorageUsage;\n    const len1StorageUsage = len64StorageUsage / BigInt(64);\n    const lenAccountStorageUsage = len1StorageUsage * BigInt(accountLength);\n    this.accounts.remove(tempAccountId);\n    return lenAccountStorageUsage * BigInt(3); // we create an entry in 3 maps\n  }\n\n  internalRegisterAccount({\n    registrantAccountId,\n    accountId,\n    amount,\n  }: {\n    registrantAccountId: string;\n    accountId: string;\n    amount: string;\n  }) {\n    assert(\n      !this.accounts.containsKey(accountId),\n      \"Account is already registered\"\n    );\n    this.accounts.set(accountId, BigInt(\"0\"));\n    this.accountRegistrants.set(accountId, registrantAccountId);\n    this.accountDeposits.set(accountId, BigInt(amount));\n  }\n\n  internalSendNEAR(receivingAccountId: string, amount: bigint) {\n    Assertions.isLeftGreaterThanRight(amount, 0);\n    Assertions.isLeftGreaterThanRight(\n      near.accountBalance(),\n      amount,\n      `Not enough balance ${near.accountBalance()} to send ${amount}`\n    );\n    const promise = near.promiseBatchCreate(receivingAccountId);\n    near.promiseBatchActionTransfer(promise, amount);\n    near.promiseReturn(promise);\n  }\n\n  internalGetBalance(accountId: string): string {\n    assert(\n      this.accounts.containsKey(accountId),\n      `Account ${accountId} is not registered`\n    );\n    return this.accounts.get(accountId).toString();\n  }\n\n  internalDeposit(accountId: string, amount: string) {\n    const balance = this.internalGetBalance(accountId);\n    const newBalance = BigInt(balance) + BigInt(amount);\n    this.accounts.set(accountId, newBalance);\n    const newSupply = BigInt(this.totalSupply) + BigInt(amount);\n    this.totalSupply = newSupply;\n  }\n\n  internalWithdraw(accountId: string, amount: string) {\n    const balance = this.internalGetBalance(accountId);\n    const newBalance = BigInt(balance) - BigInt(amount);\n    const newSupply = BigInt(this.totalSupply) - BigInt(amount);\n    Assertions.isLeftGreaterThanRight(\n      newBalance,\n      -1,\n      \"The account doesn't have enough balance\"\n    );\n    Assertions.isLeftGreaterThanRight(newSupply, -1, \"Total supply overflow\");\n    this.accounts.set(accountId, newBalance);\n    this.totalSupply = newSupply;\n  }\n\n  internalTransfer(\n    senderId: string,\n    receiverId: string,\n    amount: string,\n    _memo: string = null\n  ) {\n    assert(senderId != receiverId, \"Sender and receiver should be different\");\n    Assertions.isLeftGreaterThanRight(amount, 0);\n    this.internalWithdraw(senderId, amount);\n    this.internalDeposit(receiverId, amount);\n  }\n\n  @call({ payableFunction: true })\n  storage_deposit({ account_id }: { account_id: string }) {\n    const accountId = account_id || near.predecessorAccountId();\n    validateAccountId(accountId);\n    const attachedDeposit = near.attachedDeposit();\n    if (this.accounts.containsKey(accountId)) {\n      if (attachedDeposit > 0) {\n        this.internalSendNEAR(near.predecessorAccountId(), attachedDeposit);\n        return {\n          message:\n            \"Account is already registered, deposit refunded to predecessor\",\n        };\n      }\n      return { message: \"Account is already registered\" };\n    }\n    const storageCost = this.internalGetAccountStorageUsage(accountId.length);\n    if (attachedDeposit < storageCost) {\n      this.internalSendNEAR(near.predecessorAccountId(), attachedDeposit);\n      return {\n        message: `Not enough attached deposit to cover storage cost. Required: ${storageCost.toString()}`,\n      };\n    }\n    this.internalRegisterAccount({\n      registrantAccountId: near.predecessorAccountId(),\n      accountId: accountId,\n      amount: storageCost.toString(),\n    });\n    const refund = attachedDeposit - storageCost;\n    if (refund > 0) {\n      near.log(\n        \"Storage registration refunding \" +\n          refund +\n          \" yoctoNEAR to \" +\n          near.predecessorAccountId()\n      );\n      this.internalSendNEAR(near.predecessorAccountId(), refund);\n    }\n    return {\n      message: `Account ${accountId} registered with storage deposit of ${storageCost.toString()}`,\n    };\n  }\n\n  @call({ payableFunction: true })\n  ft_transfer({\n    receiver_id,\n    amount,\n    memo,\n  }: {\n    receiver_id: string;\n    amount: string;\n    memo: string;\n  }) {\n    Assertions.hasAtLeastOneAttachedYocto();\n    const senderId = near.predecessorAccountId();\n    near.log(\n      \"Transfer \" + amount + \" token from \" + senderId + \" to \" + receiver_id\n    );\n    this.internalTransfer(senderId, receiver_id, amount, memo);\n  }\n\n  @call({ payableFunction: true })\n  ft_transfer_call({\n    receiver_id,\n    amount,\n    memo,\n    msg,\n  }: {\n    receiver_id: string;\n    amount: string;\n    memo: string;\n    msg: string;\n  }) {\n    Assertions.hasAtLeastOneAttachedYocto();\n    const senderId = near.predecessorAccountId();\n    this.internalTransfer(senderId, receiver_id, amount, memo);\n    const promise = near.promiseBatchCreate(receiver_id);\n    const params = {\n      sender_id: senderId,\n      amount: amount,\n      msg: msg,\n      receiver_id: receiver_id,\n    };\n    near.log(\n      \"Transfer call \" +\n        amount +\n        \" token from \" +\n        senderId +\n        \" to \" +\n        receiver_id +\n        \" with message \" +\n        msg\n    );\n    near.promiseBatchActionFunctionCall(\n      promise,\n      \"ft_on_transfer\",\n      JSON.stringify(params),\n      0,\n      30000000000000\n    );\n    return near.promiseReturn(promise);\n  }\n\n  @view({})\n  ft_total_supply() {\n    return this.totalSupply;\n  }\n\n  @view({})\n  ft_balance_of({ account_id }: { account_id: string }) {\n    validateAccountId(account_id);\n    return this.internalGetBalance(account_id);\n  }\n}\n\nclass Assertions {\n  static hasAtLeastOneAttachedYocto() {\n    assert(\n      near.attachedDeposit() > BigInt(0),\n      \"Requires at least 1 yoctoNEAR to ensure signature\"\n    );\n  }\n\n  static isLeftGreaterThanRight(\n    left: string | bigint | number | boolean,\n    right: string | bigint | number | boolean,\n    message: string = null\n  ) {\n    const msg =\n      message || `Provided amount ${left} should be greater than ${right}`;\n    assert(BigInt(left) > BigInt(right), msg);\n  }\n}"],"names":["PromiseIndexBrand","TYPE_KEY","TypeBrand","ACCOUNT_ID_REGEX","assert","expression","message","Error","getValueWithOptions","value","options","deserializer","deserialize","defaultValue","deserialized","undefined","reconstructor","serializeValueWithOptions","serializer","serialize","valueToSerialize","encode","JSON","stringify","key","toString","BIGINT","Date","toISOString","DATE","valueToDeserialize","parse","decode","_","Object","keys","length","every","includes","BigInt","validateAccountId","accountId","test","bytes","s","env","latin1_string_to_uint8array","str","a","uint8array_to_latin1_string","utf8_string_to_uint8array","uint8array_to_utf8_string","CurveType","DataLength","PromiseResult","PromiseError","U64_MAX","EVICTED_REGISTER","log","params","reduce","accumulated","parameter","index","param","stringified","predecessorAccountId","predecessor_account_id","read_register","currentAccountId","current_account_id","attachedDeposit","attached_deposit","accountBalance","account_balance","storageReadRaw","returnValue","storage_read","storageHasKeyRaw","storage_has_key","storageHasKey","storageGetEvictedRaw","storageUsage","storage_usage","storageWriteRaw","storage_write","storageRemoveRaw","storage_remove","storageRemove","inputRaw","input","promiseBatchCreate","promise_batch_create","promiseBatchActionFunctionCallRaw","promiseIndex","methodName","args","amount","gas","promise_batch_action_function_call","promiseBatchActionFunctionCall","promiseBatchActionTransfer","promise_batch_action_transfer","promiseReturn","promise_return","LookupMap","constructor","keyPrefix","containsKey","storageKey","near","get","remove","set","newValue","storageValue","extend","keyValuePairs","reconstruct","data","initialize","_empty","_target","_key","_descriptor","view","call","privateFunction","payableFunction","descriptor","originalMethod","apply","NearBindgen","requireInit","target","_create","_getState","rawState","_deserialize","_saveToStorage","objectToSave","_serialize","_getArgs","forReturn","_reconstruct","classObject","plainObject","item","_requireInit","FungibleToken","_dec","_dec2","_dec3","_dec4","_dec5","_dec6","_dec7","_class","_class2","accounts","accountRegistrants","accountDeposits","totalSupply","init","owner_id","total_supply","Assertions","isLeftGreaterThanRight","internalGetAccountStorageUsage","accountLength","initialStorageUsage","tempAccountId","repeat","len64StorageUsage","len1StorageUsage","lenAccountStorageUsage","internalRegisterAccount","registrantAccountId","internalSendNEAR","receivingAccountId","promise","internalGetBalance","internalDeposit","balance","newBalance","newSupply","internalWithdraw","internalTransfer","senderId","receiverId","_memo","storage_deposit","account_id","storageCost","refund","ft_transfer","receiver_id","memo","hasAtLeastOneAttachedYocto","ft_transfer_call","msg","sender_id","ft_total_supply","ft_balance_of","_applyDecoratedDescriptor","prototype","getOwnPropertyDescriptor","_state","_contract","_args","_result","name","onReturn","value_return","left","right"],"mappings":"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"}